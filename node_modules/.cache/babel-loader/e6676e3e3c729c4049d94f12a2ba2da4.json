{"ast":null,"code":"import _slicedToArray from\"/home/robin/Desktop/robin/econ/shopbackend/shopfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Form,Button,Col}from\"react-bootstrap\";import{useDispatch,useSelector}from\"react-redux\";import FormContainer from'../FormContainer';import Checkoutsteps from\"../Checkoutsteps\";import{savePaymentMethod}from'../../actions/cartActions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PaymentScreen=function PaymentScreen(_ref){var history=_ref.history;var cart=useSelector(function(state){return state.cart;});var shippingAddress=cart.shippingAddress;var dispatch=useDispatch();var _useState=useState(\"PayPal\"),_useState2=_slicedToArray(_useState,2),paymentMethod=_useState2[0],setPaymentMethod=_useState2[1];if(!shippingAddress.address){history.push(\"/shipping\");}var submitHandler=function submitHandler(e){e.preventDefault();dispatch(savePaymentMethod(paymentMethod));history.push(\"/placeorder\");};return/*#__PURE__*/_jsxs(FormContainer,{children:[/*#__PURE__*/_jsx(Checkoutsteps,{step1:true,step2:true,step3:true}),/*#__PURE__*/_jsxs(Form,{onSubmit:submitHandler,children:[/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{as:\"legend\",children:\"select Method\"}),/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Form.Check,{type:\"radio\",label:\"PayPal or Credit Card\",id:\"paypal\",name:\"paymentMethod\",checked:true,onChange:function onChange(e){return setPaymentMethod(e.target.value);}})})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"primary\",children:\"Continue\"})]})]});};export default PaymentScreen;","map":{"version":3,"sources":["/home/robin/Desktop/robin/econ/shopbackend/shopfrontend/src/components/Screens/PaymentScreen.js"],"names":["React","useState","Form","Button","Col","useDispatch","useSelector","FormContainer","Checkoutsteps","savePaymentMethod","PaymentScreen","history","cart","state","shippingAddress","dispatch","paymentMethod","setPaymentMethod","address","push","submitHandler","e","preventDefault","target","value"],"mappings":"8KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAA+B,OAA/B,CACA,OAASC,IAAT,CAAeC,MAAf,CAAuBC,GAAvB,KAAkC,iBAAlC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAOC,CAAAA,aAAP,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,aAAP,KAA0B,kBAA1B,CAEA,OAASC,iBAAT,KAAkC,2BAAlC,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CACrC,GAAMC,CAAAA,IAAI,CAAGN,WAAW,CAAC,SAAAO,KAAK,QAAIA,CAAAA,KAAK,CAACD,IAAV,EAAN,CAAxB,CADqC,GAE7BE,CAAAA,eAF6B,CAETF,IAFS,CAE7BE,eAF6B,CAGrC,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CAHqC,cAIKJ,QAAQ,CAAC,QAAD,CAJb,wCAI9Be,aAJ8B,eAIfC,gBAJe,eAMrC,GAAI,CAACH,eAAe,CAACI,OAArB,CAA8B,CAC5BP,OAAO,CAACQ,IAAR,CAAa,WAAb,EACD,CAED,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,CAAD,CAAO,CAC3BA,CAAC,CAACC,cAAF,GACAP,QAAQ,CAACN,iBAAiB,CAACO,aAAD,CAAlB,CAAR,CACAL,OAAO,CAACQ,IAAR,CAAa,aAAb,EACD,CAJD,CAKA,mBACE,MAAC,aAAD,yBACE,KAAC,aAAD,EAAe,KAAK,KAApB,CAAqB,KAAK,KAA1B,CAA2B,KAAK,KAAhC,EADF,cAEE,MAAC,IAAD,EAAM,QAAQ,CAAEC,aAAhB,wBACE,MAAC,IAAD,CAAM,KAAN,yBACE,KAAC,IAAD,CAAM,KAAN,EAAY,EAAE,CAAC,QAAf,2BADF,cAEE,KAAC,GAAD,wBACE,KAAC,IAAD,CAAM,KAAN,EACE,IAAI,CAAC,OADP,CAEE,KAAK,CAAC,uBAFR,CAGE,EAAE,CAAC,QAHL,CAIE,IAAI,CAAC,eAJP,CAKE,OAAO,KALT,CAME,QAAQ,CAAE,kBAACC,CAAD,QAAOJ,CAAAA,gBAAgB,CAACI,CAAC,CAACE,MAAF,CAASC,KAAV,CAAvB,EANZ,EADF,EAFF,GADF,cAeE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAC,SAA9B,sBAfF,GAFF,GADF,CAwBD,CAvCD,CAyCA,cAAed,CAAAA,aAAf","sourcesContent":["import React, { useState} from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport FormContainer from '../FormContainer';\nimport Checkoutsteps from \"../Checkoutsteps\";\n\nimport { savePaymentMethod } from '../../actions/cartActions'\n\nconst PaymentScreen = ({ history }) => {\n  const cart = useSelector(state => state.cart);\n  const { shippingAddress } = cart;\n  const dispatch = useDispatch();\n  const [paymentMethod, setPaymentMethod] = useState(\"PayPal\");\n\n  if (!shippingAddress.address) {\n    history.push(\"/shipping\");\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(savePaymentMethod(paymentMethod))\n    history.push(\"/placeorder\");\n  };\n  return (\n    <FormContainer>\n      <Checkoutsteps step1 step2 step3 />\n      <Form onSubmit={submitHandler}>\n        <Form.Group>\n          <Form.Label as=\"legend\">select Method</Form.Label>\n          <Col>\n            <Form.Check\n              type=\"radio\"\n              label=\"PayPal or Credit Card\"\n              id=\"paypal\"\n              name=\"paymentMethod\"\n              checked\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            ></Form.Check>\n          </Col>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\">\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default PaymentScreen;\n"]},"metadata":{},"sourceType":"module"}